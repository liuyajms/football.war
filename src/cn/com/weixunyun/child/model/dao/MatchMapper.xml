<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.com.weixunyun.child.model.dao.MatchMapper">

    <sql id="BaseSelect">
        SELECT
          M .*, dv. NAME AS rule_name,
          C .address,
          C .name as court_name,
          C .px,
          C .py
        FROM
          MATCH M
        LEFT JOIN dictionary_value dv ON dv.dictionary_table_code = 'team'
        AND dictionary_field_code = 'rule'
        AND M . RULE = dv.code :: INTEGER
        LEFT JOIN court C ON C . ID = M .court_id
    </sql>

    <select id="get" resultType="MatchVO" parameterType="long">
        <include refid="BaseSelect"/>
        where m.id = #{id,jdbcType=NUMERIC}
    </select>

    <select id="select" resultType="Match" parameterType="long">
        select * from match where id=#{id}
    </select>

    <select id="getList" resultType="MatchVO" parameterType="map">
        SELECT
          M .*, dv. NAME AS rule_name,
          C .address,
          C .name as court_name,
          C .px,
          C .py
        <if test="px !=null and py !=null">
            , round(earth_distance(ll_to_earth(C. py, C .px), ll_to_earth(#{py}, #{px}))) AS distance
        </if>
        FROM
          MATCH M
        LEFT JOIN dictionary_value dv ON dv.dictionary_table_code = 'team'
        AND dictionary_field_code = 'rule'
        AND M . RULE = dv.code :: INTEGER
        LEFT JOIN court C ON C . ID = M .court_id
        <where>
            <if test="city !=null">
                and m.address like '%'|| #{city}||'%'
            </if>
            <if test="rule !=null">
                <![CDATA[
                    and m.rule & #{rule} > 0
                    ]]>
            </if>
            <if test="beginDate !=null">
                and m.begin_time > #{beginDate}
            </if>
            <if test="endDate !=null">
                <![CDATA[
                    and m.begin_time <= #{endDate}
                    ]]>
            </if>
            <if test="keyword !=null and keyword !=''">
                and ( m.name like '%'|| #{keyword}||'%' or C .name like '%'|| #{keyword}||'%')
            </if>
        </where>

        <choose>
            <when test="px !=null and py !=null">
                order by distance
            </when>
            <otherwise>
                order by m.begin_time desc
            </otherwise>
        </choose>

        <if test="rows !=null and rows !=0">
            limit #{rows} offset #{offset}
        </if>
    </select>

<!--我的球赛、球场球赛、球队球赛列表-->
    <select id="getMatchList" resultType="MatchVO" parameterType="map">
        select m.*, c.name as court_name
        from (
            SELECT m.*, tp.player_id from match m
              join team_player tp on tp.team_id=m.team_id
            UNION ALL
            SELECT m.*, tp.player_id from match m
              join team_player tp on tp.team_id=m.accept_team_id
        ) m
        left join court c on c.id=m.court_id
        <where>
            <if test="playerId !=null">
                and m.player_id=#{playerId}
            </if>
            <if test="courtId !=null">
                and m.court_id=#{courtId}
            </if>
            <if test="teamId !=null">
                and m.team_id=#{teamId}
            </if>
            <if test="beginDate !=null">
                and m.begin_time > #{beginDate}
            </if>
            <if test="endDate !=null">
                <![CDATA[
                    and m.begin_time <= #{endDate}
                    ]]>
            </if>
            <if test="keyword !=null and keyword !=''">
                and ( m.name like '%'|| #{keyword}||'%' or c.name like '%'|| #{keyword}||'%')
            </if>
            <if test="type !=null">
                and m.type=#{type}
            </if>
        </where>
        order by m.begin_time desc
        <if test="rows !=null and rows !=0">
            limit #{rows} offset #{offset}
        </if>
    </select>

    <sql id="DateSelect">
        SELECT
            begin_time :: DATE AS date,
            COUNT (*) AS COUNT
        FROM
            (
                SELECT
                    M .begin_time,
                    tp.team_id,
                    tp.player_id
                FROM
                    MATCH M
                JOIN team_player tp ON tp.team_id = M .team_id
                UNION ALL
                    SELECT
                        M .begin_time,
                        tp.team_id,
                        tp.player_id
                    FROM
                        MATCH M
                    JOIN team_player tp ON tp.team_id = M .accept_team_id
            ) M
    </sql>

    <select id="getListByPlayerId" resultType="map" parameterType="map">
        <include refid="DateSelect"/>
        WHERE
            player_id = #{playerId}
        <if test="beginDate !=null">
            <![CDATA[
            and begin_time between #{beginDate}::date and #{endDate}::date
            ]]>
        </if>
        GROUP BY
          begin_time::date
        /*ORDER BY
        begin_time::date*/
    </select>

    <select id="getListByTeamId" resultType="map" parameterType="map">
        <include refid="DateSelect"/>
        WHERE
            team_id = #{teamId}
        <if test="beginDate !=null">
            <![CDATA[
            and begin_time between #{beginDate}::date and #{endDate}::date
            ]]>
        </if>
        GROUP BY
          begin_time::date
        /*ORDER BY
        begin_time::date*/
    </select>

    <delete id="delete" parameterType="long">
        delete from match
        where id = #{id,jdbcType=NUMERIC}
    </delete>
    <insert id="insert" parameterType="Match">
        insert into match (id, name, rule,
          fee, begin_time, end_time,
          court_id, type, create_time,
          create_player_id, update_time,
          team_id, accept_team_id)
        values (#{id,jdbcType=NUMERIC}, #{name,jdbcType=VARCHAR}, #{rule,jdbcType=INTEGER},
          #{fee,jdbcType=VARCHAR}, #{beginTime,jdbcType=TIMESTAMP}, #{endTime,jdbcType=TIMESTAMP},
          #{courtId,jdbcType=NUMERIC}, #{type,jdbcType=NUMERIC}, #{createTime,jdbcType=TIMESTAMP},
          #{createPlayerId,jdbcType=NUMERIC}, #{updateTime,jdbcType=TIMESTAMP},
          #{teamId}, #{acceptTeamId})
    </insert>

    <update id="update" parameterType="Match">
        update match
        <set>
            <if test="name != null">
                name = #{name,jdbcType=VARCHAR},
            </if>
            <if test="rule != null">
                rule = #{rule,jdbcType=INTEGER},
            </if>
            <if test="fee != null">
                fee = #{fee,jdbcType=VARCHAR},
            </if>
            <if test="beginTime != null">
                begin_time = #{beginTime,jdbcType=TIMESTAMP},
            </if>
            <if test="endTime != null">
                end_time = #{endTime,jdbcType=TIMESTAMP},
            </if>
            <if test="courtId != null">
                court_id = #{courtId,jdbcType=NUMERIC},
            </if>
            <if test="type != null">
                type = #{type,jdbcType=NUMERIC},
            </if>
            <if test="createPlayerId != null">
                create_player_id = #{createPlayerId,jdbcType=NUMERIC},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="acceptTeamId !=null ">
                accept_team_id = #{acceptTeamId}
            </if>
        </set>
        where id = #{id,jdbcType=NUMERIC}
    </update>

</mapper>